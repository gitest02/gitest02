(function()
{
    return function()
    {
        if (!this._is_form)
            return;
        
        this.on_create = function()
        {
            // Declare Reference
            var obj = null;
            
            if (Form == this.constructor) {
                this.set_name("V_SCD_003");
                this.set_classname("V_SCD_003");
                this.set_titletext("New Form");
                this._setFormPosition(0,0,1024,768);
            }

            
            // Object(Dataset, ExcelExportObject) Initialize
            obj = new Dataset("ds_schedulelist", this);
            obj._setContents("<ColumnInfo><Column id=\"userid\" type=\"STRING\" size=\"256\"/><Column id=\"eventdate\" type=\"STRING\" size=\"256\"/><Column id=\"eventtitle\" type=\"STRING\" size=\"256\"/><Column id=\"eventmain\" type=\"STRING\" size=\"256\"/></ColumnInfo>");
            this.addChild(obj.name, obj);

            obj = new Dataset("ds_hour", this);
            obj._setContents("<ColumnInfo><Column id=\"code\" type=\"STRING\" size=\"256\"/><Column id=\"hour\" type=\"STRING\" size=\"256\"/></ColumnInfo><Rows><Row><Col id=\"code\">00</Col><Col id=\"hour\">00</Col></Row><Row><Col id=\"code\">01</Col><Col id=\"hour\">01</Col></Row><Row><Col id=\"code\">02</Col><Col id=\"hour\">02</Col></Row><Row><Col id=\"code\">03</Col><Col id=\"hour\">03</Col></Row><Row><Col id=\"code\">04</Col><Col id=\"hour\">04</Col></Row><Row><Col id=\"code\">05</Col><Col id=\"hour\">05</Col></Row><Row><Col id=\"code\">06</Col><Col id=\"hour\">06</Col></Row><Row><Col id=\"code\">07</Col><Col id=\"hour\">07</Col></Row><Row><Col id=\"code\">08</Col><Col id=\"hour\">08</Col></Row><Row><Col id=\"code\">09</Col><Col id=\"hour\">09</Col></Row><Row><Col id=\"code\">10</Col><Col id=\"hour\">10</Col></Row><Row><Col id=\"code\">11</Col><Col id=\"hour\">11</Col></Row><Row><Col id=\"code\">12</Col><Col id=\"hour\">12</Col></Row><Row><Col id=\"code\">13</Col><Col id=\"hour\">13</Col></Row><Row><Col id=\"code\">14</Col><Col id=\"hour\">14</Col></Row><Row><Col id=\"code\">15</Col><Col id=\"hour\">15</Col></Row><Row><Col id=\"code\">16</Col><Col id=\"hour\">16</Col></Row><Row><Col id=\"code\">17</Col><Col id=\"hour\">17</Col></Row><Row><Col id=\"code\">18</Col><Col id=\"hour\">18</Col></Row><Row><Col id=\"code\">19</Col><Col id=\"hour\">19</Col></Row><Row><Col id=\"code\">20</Col><Col id=\"hour\">20</Col></Row><Row><Col id=\"code\">21</Col><Col id=\"hour\">21</Col></Row><Row><Col id=\"code\">22</Col><Col id=\"hour\">22</Col></Row><Row><Col id=\"code\">23</Col><Col id=\"hour\">23</Col></Row></Rows>");
            this.addChild(obj.name, obj);

            obj = new Dataset("ds_minutes", this);
            obj._setContents("<ColumnInfo><Column id=\"code\" type=\"STRING\" size=\"256\"/><Column id=\"minutes\" type=\"STRING\" size=\"256\"/></ColumnInfo><Rows><Row><Col id=\"code\">00</Col><Col id=\"minutes\">00</Col></Row><Row><Col id=\"code\">10</Col><Col id=\"minutes\">10</Col></Row><Row><Col id=\"code\">20</Col><Col id=\"minutes\">20</Col></Row><Row><Col id=\"code\">30</Col><Col id=\"minutes\">30</Col></Row><Row><Col id=\"code\">40</Col><Col id=\"minutes\">40</Col></Row><Row><Col id=\"code\">50</Col><Col id=\"minutes\">50</Col></Row></Rows>");
            this.addChild(obj.name, obj);

            obj = new Dataset("ds_result", this);
            obj._setContents("<ColumnInfo><Column id=\"eventdate\" type=\"STRING\" size=\"256\"/><Column id=\"eventtitle\" type=\"STRING\" size=\"256\"/><Column id=\"eventmain\" type=\"STRING\" size=\"256\"/></ColumnInfo>");
            this.addChild(obj.name, obj);

            obj = new Dataset("ds_menu", this);
            obj._setContents("<ColumnInfo><Column id=\"MENU_NAME\" type=\"STRING\" size=\"32\"/><Column id=\"MENU_SEQ\" type=\"INT\" size=\"4\"/><Column id=\"MENU_OPTP\" type=\"STRING\" size=\"32\"/><Column id=\"PAGE_URL\" type=\"STRING\" size=\"32\"/><Column id=\"MENU_TOP\" type=\"STRING\" size=\"32\"/><Column id=\"MENU_ID\" type=\"STRING\" size=\"32\"/><Column id=\"MENU_GRP\" type=\"STRING\" size=\"32\"/><Column id=\"CREATE_DT\" type=\"STRING\" size=\"32\"/><Column id=\"MENU_LEVEL\" type=\"INT\" size=\"4\"/><Column id=\"PAGE_ID\" type=\"STRING\" size=\"32\"/><Column id=\"PAGE_NAME\" type=\"STRING\" size=\"32\"/><Column id=\"MENU_ARGS\" type=\"STRING\" size=\"32\"/><Column id=\"MENU_STAT\" type=\"STRING\" size=\"32\"/><Column id=\"CREATE_USER\" type=\"STRING\" size=\"32\"/><Column id=\"UPDATE_DT\" type=\"STRING\" size=\"32\"/><Column id=\"UPDATE_USER\" type=\"STRING\" size=\"32\"/><Column id=\"MENU_DESC\" type=\"STRING\" size=\"32\"/></ColumnInfo>");
            this.addChild(obj.name, obj);

            obj = new Dataset("ds_delete", this);
            obj._setContents("<ColumnInfo><Column id=\"eventdate\" type=\"STRING\" size=\"256\"/><Column id=\"userid\" type=\"STRING\" size=\"256\"/></ColumnInfo>");
            this.addChild(obj.name, obj);


            
            // UI Components Initialize
            obj = new Grid("Grid00", "absolute", "3.91%", "46", null, "224", "24.8%", null, this);
            obj.set_taborder("0");
            obj.set_binddataset("ds_result");
            obj.set_selecttype("row");
            obj._setContents("<Formats><Format id=\"default\"><Columns><Column size=\"176\"/><Column size=\"203\"/><Column size=\"358\"/></Columns><Rows><Row size=\"24\" band=\"head\"/><Row size=\"24\"/></Rows><Band id=\"head\"><Cell text=\"일 시\"/><Cell col=\"1\" text=\"일정제목\"/><Cell col=\"2\" text=\"일정내용\"/></Band><Band id=\"body\"><Cell edittype=\"none\" text=\"bind:eventdate\"/><Cell col=\"1\" edittype=\"none\" text=\"bind:eventtitle\"/><Cell col=\"2\" edittype=\"none\" text=\"bind:eventmain\"/></Band></Format></Formats>");
            this.addChild(obj.name, obj);

            obj = new Static("Static00", "absolute", "3.81%", "10", null, "28", "88.18%", null, this);
            obj.set_taborder("1");
            obj.set_text("일 정 목 록");
            obj.style.set_background("burlywood");
            obj.style.set_color("white");
            obj.style.set_align("center");
            this.addChild(obj.name, obj);

            obj = new Static("Static01", "absolute", "4.98%", "338", null, "28", "88.18%", null, this);
            obj.set_taborder("2");
            obj.set_text("일 정 제 목");
            obj.style.set_background("burlywood");
            obj.style.set_color("white");
            obj.style.set_align("center");
            this.addChild(obj.name, obj);

            obj = new Edit("ed_title", "absolute", "14.84%", "338", null, "26", "66.41%", null, this);
            obj.set_taborder("3");
            obj.set_displaynulltext("제목을 입력해주세요.");
            obj.set_maxlength("9");
            this.addChild(obj.name, obj);

            obj = new Static("Static02", "absolute", "4.98%", "372", null, "27", "88.18%", null, this);
            obj.set_taborder("4");
            obj.set_text("일 정 내 용");
            obj.style.set_background("burlywood");
            obj.style.set_color("white");
            obj.style.set_align("center");
            this.addChild(obj.name, obj);

            obj = new TextArea("ta_main", "absolute", "14.84%", "375", null, "63", "53.03%", null, this);
            obj.set_taborder("5");
            obj.set_displaynulltext("내용을 입력해주세요.");
            obj.set_maxlength("100");
            this.addChild(obj.name, obj);

            obj = new Button("btn_reset", "absolute", "24.8%", "487", null, "33", "66.41%", null, this);
            obj.set_taborder("7");
            obj.set_text("리 셋");
            this.addChild(obj.name, obj);

            obj = new Button("btn_cancel", "absolute", "66.41%", "11", null, "27", "24.8%", null, this);
            obj.set_taborder("9");
            obj.set_text("닫 기");
            this.addChild(obj.name, obj);

            obj = new Button("btn_update", "absolute", "34.77%", "487", null, "33", "56.45%", null, this);
            obj.set_taborder("10");
            obj.set_text("수 정");
            this.addChild(obj.name, obj);

            obj = new Button("btn_delete", "absolute", "66.21%", "280", null, "33", "25%", null, this);
            obj.set_taborder("11");
            obj.set_text("삭 제");
            this.addChild(obj.name, obj);

            obj = new Button("btn_ok", "absolute", "14.84%", "488", null, "33", "76.37%", null, this);
            obj.set_taborder("12");
            obj.set_text("등 록");
            this.addChild(obj.name, obj);

            obj = new Static("Static03", "absolute", "4.98%", "302", null, "28", "88.18%", null, this);
            obj.set_taborder("13");
            obj.set_text("일 정 날 짜");
            obj.style.set_background("burlywood");
            obj.style.set_color("white");
            obj.style.set_align("center");
            this.addChild(obj.name, obj);

            obj = new Edit("ed_date", "absolute", "14.84%", "304", null, "26", "66.41%", null, this);
            obj.set_taborder("14");
            this.addChild(obj.name, obj);

            obj = new Edit("ed_userid", "absolute", "62.4%", "420", null, "24", "24.32%", null, this);
            obj.set_taborder("15");
            obj.set_visible("false");
            this.addChild(obj.name, obj);

            obj = new Combo("cb_hour", "absolute", "36.52%", "304", "50", "26", null, null, this);
            this.addChild(obj.name, obj);
            obj.set_taborder("16");
            obj.set_displaynulltext("시");
            obj.set_innerdataset("@ds_hour");
            obj.set_codecolumn("code");
            obj.set_datacolumn("hour");

            obj = new Combo("cb_minute", "absolute", "42.09%", "304", "50", "26", null, null, this);
            this.addChild(obj.name, obj);
            obj.set_taborder("17");
            obj.set_displaynulltext("분");
            obj.set_innerdataset("@ds_minutes");
            obj.set_codecolumn("code");
            obj.set_datacolumn("minutes");
            obj.style.set_itemheight("20");


            
            // Layout Functions
            //-- Default Layout
            obj = new Layout("default", "", 1024, 768, this,
            	//-- Layout function
            	function(p) {
            		p.set_classname("V_SCD_003");
            		p.set_titletext("New Form");

            	}
            );
            this.addLayout(obj.name, obj);


            
            // BindItem Information
            obj = new BindItem("item0","ed_userid","value","gds_userInfo","userid");
            this.addChild(obj.name, obj);
            obj.bind();
            obj = new BindItem("item1","ed_date","value","gds_date","date");
            this.addChild(obj.name, obj);
            obj.bind();
            obj = new BindItem("item2","ta_main","value","ds_schedulelist","eventmain");
            this.addChild(obj.name, obj);
            obj.bind();
            obj = new BindItem("item3","ed_title","value","ds_schedulelist","eventtitle");
            this.addChild(obj.name, obj);
            obj.bind();

            
            // Remove Reference
            obj = null;
        };
        

        
        // User Script
        this.addIncludeScript("V_SCD_003.xfdl", "Lib::Comm.xjs");
        this.registerScript("V_SCD_003.xfdl", function() {
        //include "Lib::Comm.xjs";

        this.V_SCD_003_onload = function(obj,e)
        {
        	//기본 공통  함수 초기화
        	Iject.formOnload(obj);	
            //this.fn_search();
            //this.ds_result.clearData();

            this.ds_schedulelist.clearData();
            this.ds_schedulelist.addRow();
            this.ds_schedulelist.setColumn(0,"userid",application.gds_userInfo.getColumn(0,14)); 
            
            var date = application.gds_date.getColumn(0,"date");
            this.ds_schedulelist.setColumn(0,"eventdate",date);
            
            this.fn_search("search");	
            
            this.Grid00.autoFitCol();
            
            this.ds_menu.assign(application.gds_menu);
            
            this.ds_result.set_rowposition(application.gds_select.getColumn(0,"selectrow"));
            }

        
        this.btn_cancel_onclick = function(obj,e)
        {
        	this.fn_goPage(0);
        }

        this.btn_delete_onclick = function(obj,e)
        {
        	if(this.ed_title.value==null || this.ta_main.value==null){
        	alert("삭제하실 목록을 선택해주세요.");
        	return;
        	}
        	this.ds_delete.clearData();
        	this.ds_delete.addRow();
        	var date = this.ds_schedulelist.getColumn(0,1)+" "+this.cb_hour.value+":"+this.cb_minute.value+":"+"00";
        	this.ds_delete.setColumn(0,"eventdate",date);
        	this.ds_delete.setColumn(0,"userid",application.gds_userInfo.getColumn(0,14)); 
        	//alert(this.ds_result.getColumn(0,"eventdate"));
        	var ok = application.confirm("삭제하시겠습니까?");
        	if(ok){
        	this.fn_delete("delete");
        	//alert(this.Grid00.getSelectedRows());
        	this.ds_result.deleteRow(this.Grid00.getSelectedRows());
        	application.mainframe.VFrameSet.HFrameSet.VFrameSet1.WorkFrame.MainForm.form.fn_chk_f();
        	}else{
        	return;
        	}
        	
        }

        this.btn_reset_onclick = function(obj,e)
        {
        	this.ed_title.set_value("");
        	this.ta_main.set_value("");
        	this.cb_hour.set_value("");
        	this.cb_minute.set_value("");
        }

        this.btn_ok_onclick = function(obj,e)
        {
        	var date = application.gds_date.getColumn(0,0);
        	
        	var hour = this.cb_hour.value;
        	var minute = this.cb_minute.value;

            var eventdate = date+" "+hour+":"+minute+":"+'00';
            
            
            this.ds_schedulelist.setColumn(0,"eventdate",eventdate);
            
            //alert(this.ds_schedulelist.getColumn(0,1));
        	if(this.cb_hour.value==null){
        	alert("시간을 선택해주세요");
        	return;
        	}else if(this.cb_minute.value==null){
        	alert("분을 선택해주세요");
        	return;
        	}else if(this.ed_title.value==null){
        	alert("제목을 입력해주세요.");
        	return;
        	}else if(this.ta_main.value==null){
        	alert("내용을 입력해주세요.");
        	return;
        	}else{
        	this.fn_save("ok");
        	application.mainframe.VFrameSet.HFrameSet.VFrameSet1.WorkFrame.MainForm.form.fn_chk_f();
        	}
        	
        	
        	
        }

        this.btn_update_onclick = function(obj,e)
        {
        	//var date = this.ds_schedulelist.getColumn(0,1)+" "+this.cb_hour.value+":"+this.cb_minute.value+":"+"00";
        	//this.ds_result.setColumn(this.Grid00.getSelectedRows(),"eventdate",date);
        	//alert(this.Grid00.getSelectedRows());
        	//alert(date);
        	//this.ds_schedulelist.clearData();
        	//this.ds_schedulelist.addRow();
        	
        	var date = this.ds_result.getColumn(this.Grid00.getSelectedRows(),"eventdate");

        	this.ds_schedulelist.setColumn(0,"eventdate",date);
        	this.ds_schedulelist.setColumn(0,"eventtitle",this.ed_title.value);
        	this.ds_schedulelist.setColumn(0,"eventmain",this.ta_main.value);
        	
        	this.ds_result.setColumn(this.Grid00.getSelectedRows(),"eventtitle",this.ed_title.value);
        	this.ds_result.setColumn(this.Grid00.getSelectedRows(),"eventmain",this.ta_main.value);
        	
        	this.fn_update("update");

        }

        //화면전환
        this.fn_goPage = function(page)
        {
        	var oObj = {
                  ds    : this.ds_menu,    // 메뉴 dataset 
                  nRow  : page,              // 선택된 
                  oArgs : []               // 넘길 argument
            };
            Iject.Mdi.call(this,oObj);
            
        }

        //일정등록
        this.fn_save = function(strid)
        {
        	
        	var oDatas =  {
        			  svcid : strid,
        			  sController : "scheduleAddVO.do",			 
        			  inds :["input1=ds_schedulelist:U"],
        			  outds :[
        				 "ds_result=output1"
        			     ],			     
        			  args  : [				
        			  ],
        			  bAsync : true,    // 비동기여부 (true : async  false: sync)
        			  nDataType : 0,   // (0: XML타입, 1: 이진 타입, 2: SSV 타입)
        			  bCompress :false,	 //			  
        			}; 
        			
            //공통 transaction 함수 호츨   //function callback 
        	Iject.transaction(this,oDatas,function(){   
        		/*  
        		*   callback argument
        		*   @param : {string}    this.svcid       서비스 ID
        		*   @param : {object}    this.fobj        : 현재 form object
        		*   @param : {number}    this.errorcode  : 서비스 에러 코드
        		*   @param : {string}    this.errormsg   : 서비스 에러 메세지
        		*/  
        		
        		if(this.errorcode < 0)
        		{
        		   //Iject.alert(this.errorMsg,"알림");	
        		   alert("실패하였습니다");
        		   return;
        		}			
        	      
        	       var pThis = this.fobj;   //form object
        	       
        	      switch(this.svcid)
        	      {
        	         case "save" : 
        				Iject.alert("저장완료");
        				break;
        	      } 
        	       var pThis = this.fobj;   //form object	      
        	      
        	});
        	
            this.ds_schedulelist.addRow();
            this.ds_schedulelist.setColumn(0,"userid",application.gds_userInfo.getColumn(0,14));
        	this.reload();
        }

        //일정목록조회
        this.fn_search = function(strid){
        	var oDatas =  {
        			  svcid : strid,
        			  sController : "scheduleselectVO.do",			 
        			  inds :["input1=ds_schedulelist"],
        			  outds :[
        				 "ds_result=output1"
        			     ],			     
        			  args  : [				
        			  ],
        			  bAsync : true,    // 비동기여부 (true : async  false: sync)
        			  nDataType : 0,   // (0: XML타입, 1: 이진 타입, 2: SSV 타입)
        			  bCompress :false,	 //			  
        			}; 
        			
            //공통 transaction 함수 호츨   //function callback 
        	Iject.transaction(this,oDatas,function(){   
        		/*  
        		*   callback argument
        		*   @param : {string}    this.svcid       서비스 ID
        		*   @param : {object}    this.fobj        : 현재 form object
        		*   @param : {number}    this.errorcode  : 서비스 에러 코드
        		*   @param : {string}    this.errormsg   : 서비스 에러 메세지
        		*/  
        		
        		if(this.errorcode < 0)
        		{
        		   //Iject.alert(this.errorMsg,"알림");	
        		   alert("실패하였습니다");
        		   return;
        		}			
        	      
        	       var pThis = this.fobj;   //form object
        	       
        	      switch(this.svcid)
        	      {
        	         case "save" : 
        				Iject.alert("저장완료");
        				break;
        	      } 
        	       var pThis = this.fobj;   //form object	      
        	       
        });
        }

        //일정 삭제
        this.fn_delete = function(strid){
        	var oDatas =  {
        			  svcid : strid,
        			  sController : "scheduledeleteVO.do",			 
        			  inds :["ds_delete=ds_delete"],
        			  outds :[
        			     ],			     
        			  args  : [				
        			  ],
        			  bAsync : true,    // 비동기여부 (true : async  false: sync)
        			  nDataType : 0,   // (0: XML타입, 1: 이진 타입, 2: SSV 타입)
        			  bCompress :false,	 //			  
        			}; 
        			
            //공통 transaction 함수 호츨   //function callback 
        	Iject.transaction(this,oDatas,function(){   
        		/*  
        		*   callback argument
        		*   @param : {string}    this.svcid       서비스 ID
        		*   @param : {object}    this.fobj        : 현재 form object
        		*   @param : {number}    this.errorcode  : 서비스 에러 코드
        		*   @param : {string}    this.errormsg   : 서비스 에러 메세지
        		*/  
        		
        		if(this.errorcode < 0)
        		{
        		   //Iject.alert(this.errorMsg,"알림");	
        		   alert("실패하였습니다");
        		   return;
        		}			
        	      
        	       var pThis = this.fobj;   //form object
        	       
        	      switch(this.svcid)
        	      {
        	         case "save" : 
        				Iject.alert("저장완료");
        				break;
        	      } 
        	       var pThis = this.fobj;   //form object	      
        	       
        });
        	this.reload();
        }

        //일정 상세보기
        this.Grid00_oncellclick = function(obj,e)
        {
        	var eventdate = this.ds_result.getColumn(this.Grid00.getSelectedRows(),0);
        	var eventtitle = this.ds_result.getColumn(this.Grid00.getSelectedRows(),2);
        	var eventmain = this.ds_result.getColumn(this.Grid00.getSelectedRows(),1);
        	
        	this.ds_schedulelist.setColumn(0,"eventtitle", eventtitle);
        	this.ds_schedulelist.setColumn(0,"eventmain", eventmain);
        	this.cb_hour.set_value(eventdate.substring(11,13));
        	this.cb_minute.set_value(eventdate.substring(14,16));
        	
        }

        //일정 수정
        this.fn_update = function(strid){
        	var oDatas =  {
        			  svcid : strid,
        			  sController : "scheduleupdateVO.do",			 
        			  inds :["input1=ds_schedulelist"],
        			  outds :[
        				"ds_result=output1"
        			     ],			     
        			  args  : [				
        			  ],
        			  bAsync : true,    // 비동기여부 (true : async  false: sync)
        			  nDataType : 0,   // (0: XML타입, 1: 이진 타입, 2: SSV 타입)
        			  bCompress :false,	 //			  
        			}; 
        			
            //공통 transaction 함수 호츨   //function callback 
        	Iject.transaction(this,oDatas,function(){   
        		/*  
        		*   callback argument
        		*   @param : {string}    this.svcid       서비스 ID
        		*   @param : {object}    this.fobj        : 현재 form object
        		*   @param : {number}    this.errorcode  : 서비스 에러 코드
        		*   @param : {string}    this.errormsg   : 서비스 에러 메세지
        		*/  
        		
        		if(this.errorcode < 0)
        		{
        		   //Iject.alert(this.errorMsg,"알림");	
        		   alert("실패하였습니다");
        		   return;
        		}			
        	      
        	       var pThis = this.fobj;   //form object
        	       
        	      switch(this.svcid)
        	      {
        	         case "save" : 
        				Iject.alert("저장완료");
        				break;
        	      } 
        	       var pThis = this.fobj;   //form object	      
        	
        });
        	
        	application.gds_select.addRow();
        	
        	var selectrow = this.Grid00.getSelectedRows();
        	
        	application.gds_select.setColumn(0,"selectrow",selectrow);
        	
        	this.reload();
        }
        this.V_SCD_003_onmouseenter = function(obj,e)
        {
        	var tdate = this.ed_date.value;
        	var rdate = this.ds_result.getColumn(0,"eventdate");
        	if(rdate==null){
        	return true;
        	}else{
        	var sdate = rdate.substring(0,10);
        	if(tdate!=sdate){
        	this.reload();
        	return true;
        	}
        	}
        }
        
        });


        
        // Regist UI Components Event
        this.on_initEvent = function()
        {
            this.addEventHandler("onload", this.V_SCD_003_onload, this);
            this.addEventHandler("onmouseenter", this.V_SCD_003_onmouseenter, this);
            this.Grid00.addEventHandler("oncellclick", this.Grid00_oncellclick, this);
            this.btn_reset.addEventHandler("onclick", this.btn_reset_onclick, this);
            this.btn_cancel.addEventHandler("onclick", this.btn_cancel_onclick, this);
            this.btn_update.addEventHandler("onclick", this.btn_update_onclick, this);
            this.btn_delete.addEventHandler("onclick", this.btn_delete_onclick, this);
            this.btn_ok.addEventHandler("onclick", this.btn_ok_onclick, this);
            this.ed_date.addEventHandler("oneditclick", this.Edit02_oneditclick, this);
            this.cb_minute.addEventHandler("onitemchanged", this.cb_minute_onitemchanged, this);

        };

        this.loadIncludeScript("V_SCD_003.xfdl");

       
    };
}
)();
